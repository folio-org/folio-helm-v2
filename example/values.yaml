# Default values for example.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: folioorg/example
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

replicaCount: 1

resources:
  limits:
    # cpu: 100m
    memory: 384Mi
  requests:
    # cpu: 50m
    memory: 256Mi

autoscaling:
  enabled: false
  # minReplicas: 1
  # maxReplicas: 4
  # targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Should be set to NodePort if ingress for AWS ALB enabled
service:
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 80
      containerPort: 8081
      targetPort: http
  annotations: {}

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /*
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

args: []

eureka:
  enabled: false
  envVars: []
    # - name: FOO
    #   value: ba
  extraEnvVars: []
    # - name: FOO
    #   value: ba

## @param javaOpts Custom JVM parameters
##
javaOpts: []

extraJavaOpts:
  - "-XX:MaxRAMPercentage=75.0"
  # - "-Dlog_level=DEBUG"

envVars: []
  # - name: FOO
  #   value: bar

extraEnvVars: []
  # - name: FOO
  #   value: bar

extraEnvVarsSecrets: []
  # = foo-secret
  # - bar-secret

jmx:
  enabled: false
  agentVersion: 0.19.0
  agentPath: /jmx_exporter
  port: 9991

heapDumpEnabled: false

volumeClaims:
  extendedtmp:
    enabled: false
    name: &extendedtmp_name '{{ printf "%s-%s" (include "folio-common.fullname" $) "extendedtmp" }}'
    storageClassName: gp2
    size: 20Gi
    accessModes: ReadWriteOnce
    existingClaim:

extraVolumeMounts:
  heapdump:
    enabled: false
    name: heapdump
    mountPath: /tmp/dump
  extendedtmp:
    enabled: false
    name: extendedtmp
    mountPath: /tmp

extraVolumes:
  heapdump:
    enabled: false
    name: heapdump
    emptyDir: {}
  extendedtmp:
    enabled: false
    name: extendedtmp
    persistentVolumeClaim:
      claimName: *extendedtmp_name

initContainer:
  enabled: false
  image:
    repository: busybox
    registry: 732722833398.dkr.ecr.us-west-2.amazonaws.com
    tag: latest
    pullPolicy: IfNotPresent
  command: '["sh", "-c", "chown -R 1000:1000 /tmp"]'
  args:
  extraVolumeMounts:
    extendedtmp:
      enabled: false
      name: extendedtmp
      mountPath: /tmp

sidecarContainers:
  eureka:
    enabled: '{{ .Values.eureka.enabled }}'
    name: sidecar
    image:
      repository: folioorg/folio-module-sidecar
      pullPolicy: IfNotPresent
      tag: latest
    envVars:
      - '{{ include "folio-common.sidecar.env.eureka.common" . }}'
    extraEnvVars: []
      # - name: FOO
      #   value: bar
    ports:
      - name: sidecar
        protocol: TCP
        port: 8082
        containerPort: 8082
    resources:
      limits:
        memory: 96Mi
      requests:
        memory: 64Mi

integrations:
  okapi:
    enabled: true
    host: okapi
    port: 9130
    url: http://okapi:9130
    existingSecret: ""

  db:
    enabled: true
    host: postgresql
    hostReader: ""
    port: 5432
    database: folio
    username: admin
    password: password
    charset: UTF-8
    querytimeout: 60000
    maxpoolsize: 5
    existingSecret: ""

  kafka:
    enabled: true
    host: kafka
    port: 9092
    existingSecret: ""

  opensearch:
    enabled: true
    host: localhost
    port: 443
    url: https://opensearch:443
    username: ""
    password: ""
    existingSecret: ""

  systemuser:
    enabled: true
    name: ""
    password: ""
    existingSecret: ""

  s3:
    enabled: true
    isAws: true
    sdk: ""
    url: "http://minio"
    region: ""
    bucket: ""
    accessKeyId: ""
    secretAccessKey: ""
    forcepathstyle: ""
    existingSecret: ""

  eureka:
    enabled: '{{ .Values.eureka.enabled }}'
    existingSecret: "eureka-common"

  eureka-edge:
    enabled: '{{ .Values.eureka.enabled }}'
    existingSecret: "eureka-edge"

configMaps:
  ephemeral:
    enabled: true
    fileName: ephemeral.properties
    mountPath: /etc/edge
    existingConfig: ""
  apiconfig:
    enabled: true
    fileName: api_configuration.json
    mountPath: /etc/edge
    existingConfig: ""
  log4j:
    enabled: true
    fileName: log4j2.xml
    mountPath: /etc/log4j2.xml
    existingConfig: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

pdb:
  enabled: false
  minAvailable: ""
  maxUnavailable: ""

startupProbe: {}
readinessProbe: {}
livenessProbe: {}

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

nodeSelector: {}

tolerations: []

affinity: {}
